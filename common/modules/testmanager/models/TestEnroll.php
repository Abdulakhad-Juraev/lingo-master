<?php

namespace common\modules\testmanager\models;

use common\modules\usermanager\models\User;
use soft\helpers\ArrayHelper;
use Yii;

/**
 * This is the model class for table "test_enroll".
 *
 * @property int $id
 * @property int|null $test_id
 * @property int|null $user_id
 * @property int|null $payment_type_id
 * @property int|null $price
 * @property int|null $count
 *
 * @property Test $test
 * @property User $user
 */
class TestEnroll extends \soft\db\ActiveRecord
{
    public const PAYMENT_TYPE_ID_CASH = 1;
    public const PAYMENT_TYPE_ID_CARD = 2;
    //<editor-fold desc="Parent" defaultstate="collapsed">

    /**
     * {@inheritdoc}
     */
    public static function tableName(): string
    {
        return 'test_enroll';
    }

    public static function adminPaymentTypes(): array
    {
        return [
            self::PAYMENT_TYPE_ID_CASH => 'Naqd',
            self::PAYMENT_TYPE_ID_CARD => 'Karta orqali'
        ];
    }

    public static function paymentTypes(): array
    {
        return [
            self::PAYMENT_TYPE_ID_CASH => 'Naqd',
            self::PAYMENT_TYPE_ID_CARD => 'Karta orqali'
        ];
    }

    public function paymentTypeName()
    {
        return ArrayHelper::getArrayValue(self::paymentTypes(), $this->payment_type_id, $this->payment_type_id);
    }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['test_id', 'user_id', 'payment_type_id'], 'required'],
            [['test_id', 'user_id', 'payment_type_id', 'price', 'count'], 'integer'],
            [['test_id'], 'exist', 'skipOnError' => true, 'targetClass' => Test::className(), 'targetAttribute' => ['test_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    public function beforeSave($insert)
    {
        $this->count = $this->test->number_tries;
        $this->price = $this->test->price;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'yii\behaviors\TimestampBehavior',
            'yii\behaviors\BlameableBehavior',
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function labels()
    {
        return [
            'id' => 'ID',
            'test_id' => t('Test'),
            'user_id' => t('User'),
            'payment_type_id' => t('Payment type'),
            'price' => t('Cost'),
            'count' => t('Count'),
        ];
    }
    //</editor-fold>

    //<editor-fold desc="Relations" defaultstate="collapsed">

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTest()
    {
        return $this->hasOne(Test::className(), ['id' => 'test_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    //</editor-fold>
}
